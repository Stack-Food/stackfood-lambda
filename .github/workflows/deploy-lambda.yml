name: Deploy Lambda .NET 8

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      LAMBDA_NAME: ${{ vars.LAMBDA_NAME }}
      BUCKET_NAME: ${{ vars.BUCKET_NAME }}

    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Gerar versão semântica
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          version_format: "${major}.${minor}.${patch}"
          bump_each_commit: true

      - name: Configurar .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restaurar dependências
        run: dotnet restore

      - name: Buildar projeto
        run: dotnet publish ./src/StackFood.Lambda -c Release -f net8.0 -o ./publish

      - name: Compactar Lambda
        run: |
          cd publish
          zip -r ../${{ env.LAMBDA_NAME }}-v${{ steps.version.outputs.version }}.zip .
          cd ..

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Subir artefato para S3
        run: aws s3 cp ${{ env.LAMBDA_NAME }}-v${{ steps.version.outputs.version }}.zip s3://${{ env.BUCKET_NAME }}/

      - name: Atualizar Lambda Function
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_NAME }} \
            --s3-bucket ${{ env.BUCKET_NAME }} \
            --s3-key ${{ env.LAMBDA_NAME }}-v${{ steps.version.outputs.version }}.zip

      - name: Aguardar função ficar disponível
        run: |
          echo "⏳ Aguardando a função Lambda ficar disponível..."
          max_attempts=30
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Tentativa $attempt de $max_attempts..."
            
            status=$(aws lambda get-function \
              --function-name ${{ env.LAMBDA_NAME }} \
              --query 'Configuration.State' \
              --output text)
            
            last_update_status=$(aws lambda get-function \
              --function-name ${{ env.LAMBDA_NAME }} \
              --query 'Configuration.LastUpdateStatus' \
              --output text)
            
            echo "Status atual: $status"
            echo "Status da última atualização: $last_update_status"
            
            if [ "$status" = "Active" ] && [ "$last_update_status" = "Successful" ]; then
              echo "✅ Função Lambda está disponível!"
              break
            fi
            
            if [ "$last_update_status" = "Failed" ]; then
              echo "❌ Atualização da função falhou!"
              exit 1
            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ Timeout aguardando a função ficar disponível"
              exit 1
            fi
            
            echo "⏳ Aguardando 10 segundos antes da próxima verificação..."
            sleep 10
            attempt=$((attempt + 1))
          done

      - name: Publicar versão da Lambda
        id: publish_version
        run: |
          echo "📦 Publicando versão da Lambda..."
          VERSION_ARN=$(aws lambda publish-version \
            --function-name ${{ env.LAMBDA_NAME }} \
            --description "v${{ steps.version.outputs.version }} - ${{ github.event.head_commit.message }}" \
            --query 'Version' --output text)
          echo "lambda_version=$VERSION_ARN" >> $GITHUB_OUTPUT
          echo "✅ Versão $VERSION_ARN publicada com sucesso!"

      - name: Criar alias (opcional)
        run: |
          echo "🏷️ Criando/atualizando alias..."
          aws lambda update-alias \
            --function-name ${{ env.LAMBDA_NAME }} \
            --name LATEST-DEPLOY \
            --function-version ${{ steps.publish_version.outputs.lambda_version }} \
            --description "Última versão deployada via GitHub Actions - v${{ steps.version.outputs.version }}" || \
          aws lambda create-alias \
            --function-name ${{ env.LAMBDA_NAME }} \
            --name LATEST-DEPLOY \
            --function-version ${{ steps.publish_version.outputs.lambda_version }} \
            --description "Última versão deployada via GitHub Actions - v${{ steps.version.outputs.version }}"

      - name: Mostrar informações do deploy
        run: |
          echo "🎉 Deploy realizado com sucesso!"
          echo "📦 Versão Semântica: v${{ steps.version.outputs.version }}"
          echo "🏷️ Lambda Version: ${{ steps.publish_version.outputs.lambda_version }}"
          echo "🔗 Commit: ${{ github.sha }}"
          echo "📝 Mensagem: ${{ github.event.head_commit.message }}"
